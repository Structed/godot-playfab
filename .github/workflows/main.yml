name: CI Godot 3

# Controls when the workflow will run
on:
  push:
    branches:
      - godot3-develop
      - godot3
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - godot3-develop
      - godot3

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  ADDON_NAME: godot-playfab
  GODOT_PLAYFAB_TEST_USER: ${{ secrets.GODOT_PLAYFAB_TEST_USER }}
  GODOT_PLAYFAB_TEST_PASSWORD: ${{ secrets.GODOT_PLAYFAB_TEST_PASSWORD }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Run Godot Tests with GUT (https://github.com/bitwes/Gut)
      - name: Run Godot 3.5 Tests
        uses: croconut/godot-tester@v2.5
        with:
          # required
          version: "3.5"
          # the type of release of godot that the tests should be run with
          release_type: "stable"
          is-mono: "false"
          # the folder with your projects.godot file in it
          path: "."
          # how long to spend importing assets before tests are run
          import-time: "1"
          # how long tests can run in seconds
          test-timeout: "45"
          # the ratio of tests that must pass for this action to pass
          # e.g. 0.6 means 60% of your tests must pass
          minimum-pass: "1.0"
          # the directory containing Gut tests
          test-dir: 'res://addons/${{env.ADDON_NAME}}/test'
          # instead of running GUT's command line tool, you can run a GUT test scene if you have one
          # set up correctly
          # helps enable things like mouse mocking and current scene to work without any extra coding steps
          # set up a scene like in this repo --> located at /tester/test/alt_mode/tests.tscn
          # set up a script like in this repo --> located at /tester/test/alt_mode/cli_plugin.gd
          # ensure cli_plugin.gd inherits from the GUT plugin
          # and exits on test completion
          # ensure tests.tscn uses your modified plugin script and check yes for run on load
          # uses relative path from your godot project directory
          #direct-scene: "test/alt_mode/tests.tscn"
          # default is false, set true to count asserts instead of tests
          assert-check: "true"
          # not checked by default, set to a number to limit the
          # maximum amount of failed tests for a passing test suite
          max-fails: 0
          # to ensure all SCRIPT ERRORS dont contribute to your failure rate
          ignore-errors: "true"
          # default is GUTs default: 'res://.gutconfig.json'; set this to load a different config file
          config-file: "res://.gutconfig.json"

      - name: Run Godot 3.4.4 Tests
        uses: croconut/godot-tester@v2.5
        with:
          # required
          version: "3.4.4"
          # the type of release of godot that the tests should be run with
          release_type: "stable"
          is-mono: "false"
          # the folder with your projects.godot file in it
          path: "."
          # how long to spend importing assets before tests are run
          import-time: "1"
          # how long tests can run in seconds
          test-timeout: "45"
          # the ratio of tests that must pass for this action to pass
          # e.g. 0.6 means 60% of your tests must pass
          minimum-pass: "1.0"
          # the directory containing Gut tests
          test-dir: 'res://addons/${{env.ADDON_NAME}}/test'
          # instead of running GUT's command line tool, you can run a GUT test scene if you have one
          # set up correctly
          # helps enable things like mouse mocking and current scene to work without any extra coding steps
          # set up a scene like in this repo --> located at /tester/test/alt_mode/tests.tscn
          # set up a script like in this repo --> located at /tester/test/alt_mode/cli_plugin.gd
          # ensure cli_plugin.gd inherits from the GUT plugin
          # and exits on test completion
          # ensure tests.tscn uses your modified plugin script and check yes for run on load
          # uses relative path from your godot project directory
          #direct-scene: "test/alt_mode/tests.tscn"
          # default is false, set true to count asserts instead of tests
          assert-check: "true"
          # not checked by default, set to a number to limit the
          # maximum amount of failed tests for a passing test suite
          max-fails: 0
          # to ensure all SCRIPT ERRORS dont contribute to your failure rate
          ignore-errors: "true"
          # default is GUTs default: 'res://.gutconfig.json'; set this to load a different config file
          config-file: "res://.gutconfig.json"
